// Code generated by MockGen. DO NOT EDIT.
// Source: ./controlplane.go
//
// Generated by this command:
//
//	mockgen -source=./controlplane.go -destination=./mock_handlerservice/mock_controlplane.go -package=mock_handlerservice
//

// Package mock_handlerservice is a generated GoMock package.
package mock_handlerservice

import (
	context "context"
	reflect "reflect"

	models "github.com/resource-aware-jds/resource-aware-jds/models"
	cert "github.com/resource-aware-jds/resource-aware-jds/pkg/cert"
	gomock "go.uber.org/mock/gomock"
)

// MockIControlPlane is a mock of IControlPlane interface.
type MockIControlPlane struct {
	ctrl     *gomock.Controller
	recorder *MockIControlPlaneMockRecorder
}

// MockIControlPlaneMockRecorder is the mock recorder for MockIControlPlane.
type MockIControlPlaneMockRecorder struct {
	mock *MockIControlPlane
}

// NewMockIControlPlane creates a new mock instance.
func NewMockIControlPlane(ctrl *gomock.Controller) *MockIControlPlane {
	mock := &MockIControlPlane{ctrl: ctrl}
	mock.recorder = &MockIControlPlaneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIControlPlane) EXPECT() *MockIControlPlaneMockRecorder {
	return m.recorder
}

// CheckInWorkerNode mocks base method.
func (m *MockIControlPlane) CheckInWorkerNode(ctx context.Context, ip string, port int32, cert []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInWorkerNode", ctx, ip, port, cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckInWorkerNode indicates an expected call of CheckInWorkerNode.
func (mr *MockIControlPlaneMockRecorder) CheckInWorkerNode(ctx, ip, port, cert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInWorkerNode", reflect.TypeOf((*MockIControlPlane)(nil).CheckInWorkerNode), ctx, ip, port, cert)
}

// GetAllWorkerNodeFromRegistry mocks base method.
func (m *MockIControlPlane) GetAllWorkerNodeFromRegistry(ctx context.Context) ([]models.NodeEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWorkerNodeFromRegistry", ctx)
	ret0, _ := ret[0].([]models.NodeEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWorkerNodeFromRegistry indicates an expected call of GetAllWorkerNodeFromRegistry.
func (mr *MockIControlPlaneMockRecorder) GetAllWorkerNodeFromRegistry(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWorkerNodeFromRegistry", reflect.TypeOf((*MockIControlPlane)(nil).GetAllWorkerNodeFromRegistry), ctx)
}

// RegisterWorker mocks base method.
func (m *MockIControlPlane) RegisterWorker(ctx context.Context, ip string, port int32, nodePublicKey cert.KeyData) (cert.TLSCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWorker", ctx, ip, port, nodePublicKey)
	ret0, _ := ret[0].(cert.TLSCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterWorker indicates an expected call of RegisterWorker.
func (mr *MockIControlPlaneMockRecorder) RegisterWorker(ctx, ip, port, nodePublicKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWorker", reflect.TypeOf((*MockIControlPlane)(nil).RegisterWorker), ctx, ip, port, nodePublicKey)
}
