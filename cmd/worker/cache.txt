	logrus.Info("\"Starting up the Worker.\"")
	caCertificate, err := cert.ProvideWorkerNodeCACertificate(cert.WorkerNodeCACertificateConfig{
		CACertificateFilePath: "/Users/sirateek/.rajds/controlplane/ca/cert.pem",
	})
	if err != nil {
		panic(err)
	}

	grpcConn, err := grpc.ProvideRAJDSGrpcClient(grpc.ClientConfig{
		Target:        "localhost:31234",
		CACertificate: caCertificate,
	})
	if err != nil {
		panic(err)
	}

	controlPlaneClient := proto.NewControlPlaneClient(grpcConn.GetConnection())

	privateKey, err := rsa.GenerateKey(rand.Reader, 4096)

	if err != nil {
		panic(err)
	}

	result, err := controlPlaneClient.WorkerRegistration(context.Background(), &proto.ComputeNodeRegistrationRequest{
		Ip:            "1234",
		Port:          1234,
		NodePublicKey: x509.MarshalPKCS1PublicKey(&privateKey.PublicKey),
	})
	if err != nil {
		logrus.Error(err)
		panic(err)
	}

	logrus.Info(result.Certificate)

	parsedCertificate, err := cert.LoadCertificate(result.Certificate)
	if err != nil {
		logrus.Error(err)
		return
	}

	parsedKey, err := cert.ParsePrivateKeyToKeyData(x509.MarshalPKCS1PrivateKey(privateKey))
	if err != nil {
		logrus.Error(err)
		return
	}

	dataResult, err := cert.ProvideTLSCertificate(parsedCertificate, parsedKey, false)
	if err != nil {
		logrus.Error(err)
		return
	}

	err = dataResult.SaveCertificateToFile("/Users/sirateek/.rajds/workernode/transport/cert.pem", "/Users/sirateek/.rajds/workernode/transport/key.pem")
	if err != nil {
		logrus.Error(err)
	}