// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/resource-aware-jds/resource-aware-jds/cmd/worker/handler"
	"github.com/resource-aware-jds/resource-aware-jds/config"
	"github.com/resource-aware-jds/resource-aware-jds/daemon"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/buffer"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/cert"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/dockerclient"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/grpc"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/taskqueue"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/workerdistribution"
	"github.com/resource-aware-jds/resource-aware-jds/service"
)

// Injectors from wire.go:

func InitializeApplication() (WorkerApp, func(), error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return WorkerApp{}, nil, err
	}
	grpcConfig := config.ProvideWorkerGRPCConfig(configConfig)
	workerConfigModel := config.ProvideWorkerConfigModel(configConfig)
	workerNodeTransportCertificateConfig := config.ProvideWorkerNodeTransportCertificate(workerConfigModel)
	workerNodeCACertificateConfig := config.ProvideClientCATLSCertificateConfig(workerConfigModel)
	workerNodeCACertificate, err := cert.ProvideWorkerNodeCACertificate(workerNodeCACertificateConfig)
	if err != nil {
		return WorkerApp{}, nil, err
	}
	clientConfig := config.ProvideGRPCClientConfig(workerConfigModel, workerNodeCACertificate)
	rajdsGrpcClient, err := grpc.ProvideRAJDSGrpcClient(clientConfig)
	if err != nil {
		return WorkerApp{}, nil, err
	}
	controlPlaneClient := ProvideControlPlaneGRPCClient(rajdsGrpcClient)
	transportCertificate, err := cert.ProvideWorkerNodeTransportCertificate(workerNodeTransportCertificateConfig, controlPlaneClient)
	if err != nil {
		return WorkerApp{}, nil, err
	}
	rajdsGrpcServer, cleanup, err := grpc.ProvideGRPCServer(grpcConfig, transportCertificate)
	if err != nil {
		return WorkerApp{}, nil, err
	}
	client, cleanup2, err := dockerclient.ProvideDockerClient()
	if err != nil {
		cleanup()
		return WorkerApp{}, nil, err
	}
	queue := taskqueue.ProvideTaskQueue()
	workerDistributor := workerdistribution.ProvideDelayWorkerDistributor()
	iWorker := service.ProvideWorker(controlPlaneClient, client, transportCertificate, workerConfigModel, queue, workerDistributor)
	grpcHandler := handler.ProvideWorkerGRPCHandler(rajdsGrpcServer, iWorker)
	workerNodeReceiverConfig := config.ProvideWorkerNodeReceiverConfig(workerConfigModel)
	workerNodeReceiverGRPCServer, cleanup3, err := grpc.ProvideWorkerNodeReceiverGRPCServer(workerNodeReceiverConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return WorkerApp{}, nil, err
	}
	workerNodeReceiverGRPCHandler := handler.ProvideWorkerGRPCSocketHandler(workerNodeReceiverGRPCServer, iWorker)
	containerBuffer := buffer.ProvideContainerBuffer()
	iResourceMonitor := service.ProvideResourcesMonitor(client, containerBuffer)
	workerNode := daemon.ProvideWorkerNodeDaemon(client, iWorker, iResourceMonitor)
	workerApp := ProvideWorkerApp(rajdsGrpcServer, grpcHandler, workerNodeReceiverGRPCServer, workerNodeReceiverGRPCHandler, workerNode)
	return workerApp, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
