// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/resource-aware-jds/resource-aware-jds/cmd/controlplane/handler"
	"github.com/resource-aware-jds/resource-aware-jds/config"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/grpc"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/mongo"
	"github.com/resource-aware-jds/resource-aware-jds/repository"
	"github.com/resource-aware-jds/resource-aware-jds/service"
)

// Injectors from wire.go:

func InitializeApplication() (ControlPlaneApp, func(), error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return ControlPlaneApp{}, nil, err
	}
	grpcConfig := config.ProvideGRPCConfig(configConfig)
	rajdsGrpc, cleanup, err := grpc.ProvideGRPCServer(grpcConfig)
	if err != nil {
		return ControlPlaneApp{}, nil, err
	}
	controlPlaneConfigModel := config.ProvideControlPlaneConfigModel(configConfig)
	mongoConfig := config.ProvideMongoConfig(controlPlaneConfigModel)
	database, cleanup2, err := mongo.ProvideMongoConnection(mongoConfig)
	if err != nil {
		cleanup()
		return ControlPlaneApp{}, nil, err
	}
	iControlPlane := repository.ProvideControlPlane(database)
	serviceIControlPlane := service.ProvideControlPlane(iControlPlane)
	grpcHandler := handler.ProvideControlPlaneGRPCHandler(rajdsGrpc, serviceIControlPlane)
	controlPlaneApp := ProvideControlPlaneApp(rajdsGrpc, grpcHandler)
	return controlPlaneApp, func() {
		cleanup2()
		cleanup()
	}, nil
}
