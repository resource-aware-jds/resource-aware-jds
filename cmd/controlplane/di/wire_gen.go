// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/resource-aware-jds/resource-aware-jds/cmd/controlplane/handler"
	"github.com/resource-aware-jds/resource-aware-jds/config"
	"github.com/resource-aware-jds/resource-aware-jds/daemon"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/cert"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/distribution"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/grpc"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/mongo"
	"github.com/resource-aware-jds/resource-aware-jds/pkg/pool"
	"github.com/resource-aware-jds/resource-aware-jds/repository"
	"github.com/resource-aware-jds/resource-aware-jds/service"
)

// Injectors from wire.go:

func InitializeApplication() (ControlPlaneApp, func(), error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return ControlPlaneApp{}, nil, err
	}
	grpcConfig := config.ProvideControlPlaneGRPCConfig(configConfig)
	controlPlaneConfigModel := config.ProvideControlPlaneConfigModel(configConfig)
	transportCertificateConfig := config.ProvideTransportCertificateConfig(controlPlaneConfigModel)
	caCertificateConfig := config.ProvideCACertificateConfig(controlPlaneConfigModel)
	caCertificate, err := cert.ProvideCACertificate(caCertificateConfig)
	if err != nil {
		return ControlPlaneApp{}, nil, err
	}
	transportCertificate, err := cert.ProvideTransportCertificate(transportCertificateConfig, caCertificate)
	if err != nil {
		return ControlPlaneApp{}, nil, err
	}
	rajdsGrpcServer, cleanup, err := grpc.ProvideGRPCServer(grpcConfig, transportCertificate)
	if err != nil {
		return ControlPlaneApp{}, nil, err
	}
	mongoConfig := config.ProvideMongoConfig(controlPlaneConfigModel)
	database, cleanup2, err := mongo.ProvideMongoConnection(mongoConfig)
	if err != nil {
		cleanup()
		return ControlPlaneApp{}, nil, err
	}
	iJob := repository.ProvideJob(database)
	iTask := repository.ProvideTask(database)
	iNodeRegistry := repository.ProvideControlPlane(database)
	distributor := distribution.ProvideRoundRobinDistributor()
	workerNode := pool.ProvideWorkerNode(caCertificate, distributor)
	iControlPlane := service.ProvideControlPlane(iJob, iTask, iNodeRegistry, caCertificate, controlPlaneConfigModel, workerNode)
	grpcHandler := handler.ProvideControlPlaneGRPCHandler(rajdsGrpcServer, iControlPlane)
	daemonIControlPlane, cleanup3 := daemon.ProvideControlPlaneDaemon(workerNode, iControlPlane)
	controlPlaneApp := ProvideControlPlaneApp(rajdsGrpcServer, grpcHandler, daemonIControlPlane)
	return controlPlaneApp, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
