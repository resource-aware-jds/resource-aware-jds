// Code generated by MockGen. DO NOT EDIT.
// Source: ./cptaskwatcher.go
//
// Generated by this command:
//
//	mockgen -source=./cptaskwatcher.go -destination=./mock_service/mock_cptaskwatcher.go -package=mock_service
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/resource-aware-jds/resource-aware-jds/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockCPTaskWatcher is a mock of CPTaskWatcher interface.
type MockCPTaskWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockCPTaskWatcherMockRecorder
}

// MockCPTaskWatcherMockRecorder is the mock recorder for MockCPTaskWatcher.
type MockCPTaskWatcherMockRecorder struct {
	mock *MockCPTaskWatcher
}

// NewMockCPTaskWatcher creates a new mock instance.
func NewMockCPTaskWatcher(ctrl *gomock.Controller) *MockCPTaskWatcher {
	mock := &MockCPTaskWatcher{ctrl: ctrl}
	mock.recorder = &MockCPTaskWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCPTaskWatcher) EXPECT() *MockCPTaskWatcherMockRecorder {
	return m.recorder
}

// AddTaskToWatch mocks base method.
func (m *MockCPTaskWatcher) AddTaskToWatch(taskID primitive.ObjectID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTaskToWatch", taskID)
}

// AddTaskToWatch indicates an expected call of AddTaskToWatch.
func (mr *MockCPTaskWatcherMockRecorder) AddTaskToWatch(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskToWatch", reflect.TypeOf((*MockCPTaskWatcher)(nil).AddTaskToWatch), taskID)
}

// GetTaskUnderWatch mocks base method.
func (m *MockCPTaskWatcher) GetTaskUnderWatch() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskUnderWatch")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTaskUnderWatch indicates an expected call of GetTaskUnderWatch.
func (mr *MockCPTaskWatcherMockRecorder) GetTaskUnderWatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskUnderWatch", reflect.TypeOf((*MockCPTaskWatcher)(nil).GetTaskUnderWatch))
}

// OnEvent mocks base method.
func (m *MockCPTaskWatcher) OnEvent(arg0 context.Context, arg1 models.TaskEventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnEvent indicates an expected call of OnEvent.
func (mr *MockCPTaskWatcherMockRecorder) OnEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEvent", reflect.TypeOf((*MockCPTaskWatcher)(nil).OnEvent), arg0, arg1)
}

// WatcherLoop mocks base method.
func (m *MockCPTaskWatcher) WatcherLoop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatcherLoop", ctx)
}

// WatcherLoop indicates an expected call of WatcherLoop.
func (mr *MockCPTaskWatcherMockRecorder) WatcherLoop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatcherLoop", reflect.TypeOf((*MockCPTaskWatcher)(nil).WatcherLoop), ctx)
}
