// Code generated by MockGen. DO NOT EDIT.
// Source: ./job.go
//
// Generated by this command:
//
//	mockgen -source=./job.go -destination=./mock_service/mock_job.go -package=mock_service
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/resource-aware-jds/resource-aware-jds/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockJob is a mock of Job interface.
type MockJob struct {
	ctrl     *gomock.Controller
	recorder *MockJobMockRecorder
}

// MockJobMockRecorder is the mock recorder for MockJob.
type MockJobMockRecorder struct {
	mock *MockJob
}

// NewMockJob creates a new mock instance.
func NewMockJob(ctrl *gomock.Controller) *MockJob {
	mock := &MockJob{ctrl: ctrl}
	mock.recorder = &MockJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJob) EXPECT() *MockJobMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockJob) CreateJob(ctx context.Context, name, imageURL string, isExperiment bool, distributionLogic models.DistributorName) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, name, imageURL, isExperiment, distributionLogic)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobMockRecorder) CreateJob(ctx, name, imageURL, isExperiment, distributionLogic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJob)(nil).CreateJob), ctx, name, imageURL, isExperiment, distributionLogic)
}

// GetJob mocks base method.
func (m *MockJob) GetJob(ctx context.Context, id primitive.ObjectID) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, id)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockJobMockRecorder) GetJob(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockJob)(nil).GetJob), ctx, id)
}

// ListJob mocks base method.
func (m *MockJob) ListJob(ctx context.Context) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJob", ctx)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJob indicates an expected call of ListJob.
func (mr *MockJobMockRecorder) ListJob(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJob", reflect.TypeOf((*MockJob)(nil).ListJob), ctx)
}

// ListJobReadyToDistribute mocks base method.
func (m *MockJob) ListJobReadyToDistribute(ctx context.Context) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobReadyToDistribute", ctx)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobReadyToDistribute indicates an expected call of ListJobReadyToDistribute.
func (mr *MockJobMockRecorder) ListJobReadyToDistribute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobReadyToDistribute", reflect.TypeOf((*MockJob)(nil).ListJobReadyToDistribute), ctx)
}

// UpdateJobStatusToDistributing mocks base method.
func (m *MockJob) UpdateJobStatusToDistributing(ctx context.Context, id *primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatusToDistributing", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatusToDistributing indicates an expected call of UpdateJobStatusToDistributing.
func (mr *MockJobMockRecorder) UpdateJobStatusToDistributing(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusToDistributing", reflect.TypeOf((*MockJob)(nil).UpdateJobStatusToDistributing), ctx, id)
}

// UpdateJobStatusToExperimenting mocks base method.
func (m *MockJob) UpdateJobStatusToExperimenting(ctx context.Context, id *primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatusToExperimenting", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatusToExperimenting indicates an expected call of UpdateJobStatusToExperimenting.
func (mr *MockJobMockRecorder) UpdateJobStatusToExperimenting(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusToExperimenting", reflect.TypeOf((*MockJob)(nil).UpdateJobStatusToExperimenting), ctx, id)
}

// UpdateJobStatusToFinish mocks base method.
func (m *MockJob) UpdateJobStatusToFinish(ctx context.Context, id *primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatusToFinish", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatusToFinish indicates an expected call of UpdateJobStatusToFinish.
func (mr *MockJobMockRecorder) UpdateJobStatusToFinish(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusToFinish", reflect.TypeOf((*MockJob)(nil).UpdateJobStatusToFinish), ctx, id)
}

// UpdateJobToFailed mocks base method.
func (m *MockJob) UpdateJobToFailed(ctx context.Context, id *primitive.ObjectID, message string, inputErr error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobToFailed", ctx, id, message, inputErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobToFailed indicates an expected call of UpdateJobToFailed.
func (mr *MockJobMockRecorder) UpdateJobToFailed(ctx, id, message, inputErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobToFailed", reflect.TypeOf((*MockJob)(nil).UpdateJobToFailed), ctx, id, message, inputErr)
}
