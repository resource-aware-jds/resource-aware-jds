// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/github.com/resource-aware-jds/resource-aware-jds/generated/proto/workernode_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./proto/github.com/resource-aware-jds/resource-aware-jds/generated/proto/workernode_grpc.pb.go -destination=./mock_proto/mock_workernode_grpc.go -package=mock_proto
//

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	proto "github.com/resource-aware-jds/resource-aware-jds/generated/proto/github.com/resource-aware-jds/resource-aware-jds/generated/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockWorkerNodeClient is a mock of WorkerNodeClient interface.
type MockWorkerNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerNodeClientMockRecorder
}

// MockWorkerNodeClientMockRecorder is the mock recorder for MockWorkerNodeClient.
type MockWorkerNodeClientMockRecorder struct {
	mock *MockWorkerNodeClient
}

// NewMockWorkerNodeClient creates a new mock instance.
func NewMockWorkerNodeClient(ctrl *gomock.Controller) *MockWorkerNodeClient {
	mock := &MockWorkerNodeClient{ctrl: ctrl}
	mock.recorder = &MockWorkerNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerNodeClient) EXPECT() *MockWorkerNodeClientMockRecorder {
	return m.recorder
}

// GetAllTasks mocks base method.
func (m *MockWorkerNodeClient) GetAllTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.TaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllTasks", varargs...)
	ret0, _ := ret[0].(*proto.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockWorkerNodeClientMockRecorder) GetAllTasks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockWorkerNodeClient)(nil).GetAllTasks), varargs...)
}

// HealthCheck mocks base method.
func (m *MockWorkerNodeClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.Resource, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthCheck", varargs...)
	ret0, _ := ret[0].(*proto.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockWorkerNodeClientMockRecorder) HealthCheck(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockWorkerNodeClient)(nil).HealthCheck), varargs...)
}

// SendTask mocks base method.
func (m *MockWorkerNodeClient) SendTask(ctx context.Context, in *proto.RecievedTask, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendTask", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTask indicates an expected call of SendTask.
func (mr *MockWorkerNodeClientMockRecorder) SendTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTask", reflect.TypeOf((*MockWorkerNodeClient)(nil).SendTask), varargs...)
}

// MockWorkerNodeServer is a mock of WorkerNodeServer interface.
type MockWorkerNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerNodeServerMockRecorder
}

// MockWorkerNodeServerMockRecorder is the mock recorder for MockWorkerNodeServer.
type MockWorkerNodeServerMockRecorder struct {
	mock *MockWorkerNodeServer
}

// NewMockWorkerNodeServer creates a new mock instance.
func NewMockWorkerNodeServer(ctrl *gomock.Controller) *MockWorkerNodeServer {
	mock := &MockWorkerNodeServer{ctrl: ctrl}
	mock.recorder = &MockWorkerNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerNodeServer) EXPECT() *MockWorkerNodeServerMockRecorder {
	return m.recorder
}

// GetAllTasks mocks base method.
func (m *MockWorkerNodeServer) GetAllTasks(arg0 context.Context, arg1 *emptypb.Empty) (*proto.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", arg0, arg1)
	ret0, _ := ret[0].(*proto.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockWorkerNodeServerMockRecorder) GetAllTasks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockWorkerNodeServer)(nil).GetAllTasks), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockWorkerNodeServer) HealthCheck(arg0 context.Context, arg1 *emptypb.Empty) (*proto.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(*proto.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockWorkerNodeServerMockRecorder) HealthCheck(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockWorkerNodeServer)(nil).HealthCheck), arg0, arg1)
}

// SendTask mocks base method.
func (m *MockWorkerNodeServer) SendTask(arg0 context.Context, arg1 *proto.RecievedTask) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTask", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTask indicates an expected call of SendTask.
func (mr *MockWorkerNodeServerMockRecorder) SendTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTask", reflect.TypeOf((*MockWorkerNodeServer)(nil).SendTask), arg0, arg1)
}

// mustEmbedUnimplementedWorkerNodeServer mocks base method.
func (m *MockWorkerNodeServer) mustEmbedUnimplementedWorkerNodeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWorkerNodeServer")
}

// mustEmbedUnimplementedWorkerNodeServer indicates an expected call of mustEmbedUnimplementedWorkerNodeServer.
func (mr *MockWorkerNodeServerMockRecorder) mustEmbedUnimplementedWorkerNodeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWorkerNodeServer", reflect.TypeOf((*MockWorkerNodeServer)(nil).mustEmbedUnimplementedWorkerNodeServer))
}

// MockUnsafeWorkerNodeServer is a mock of UnsafeWorkerNodeServer interface.
type MockUnsafeWorkerNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWorkerNodeServerMockRecorder
}

// MockUnsafeWorkerNodeServerMockRecorder is the mock recorder for MockUnsafeWorkerNodeServer.
type MockUnsafeWorkerNodeServerMockRecorder struct {
	mock *MockUnsafeWorkerNodeServer
}

// NewMockUnsafeWorkerNodeServer creates a new mock instance.
func NewMockUnsafeWorkerNodeServer(ctrl *gomock.Controller) *MockUnsafeWorkerNodeServer {
	mock := &MockUnsafeWorkerNodeServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWorkerNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWorkerNodeServer) EXPECT() *MockUnsafeWorkerNodeServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWorkerNodeServer mocks base method.
func (m *MockUnsafeWorkerNodeServer) mustEmbedUnimplementedWorkerNodeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWorkerNodeServer")
}

// mustEmbedUnimplementedWorkerNodeServer indicates an expected call of mustEmbedUnimplementedWorkerNodeServer.
func (mr *MockUnsafeWorkerNodeServerMockRecorder) mustEmbedUnimplementedWorkerNodeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWorkerNodeServer", reflect.TypeOf((*MockUnsafeWorkerNodeServer)(nil).mustEmbedUnimplementedWorkerNodeServer))
}
