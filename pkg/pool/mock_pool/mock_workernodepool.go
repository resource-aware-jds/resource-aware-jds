// Code generated by MockGen. DO NOT EDIT.
// Source: ./workernodepool.go
//
// Generated by this command:
//
//	mockgen -source=./workernodepool.go -destination=./mock_pool/mock_workernodepool.go -package=mock_pool
//

// Package mock_pool is a generated GoMock package.
package mock_pool

import (
	context "context"
	reflect "reflect"

	models "github.com/resource-aware-jds/resource-aware-jds/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkerNode is a mock of WorkerNode interface.
type MockWorkerNode struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerNodeMockRecorder
}

// MockWorkerNodeMockRecorder is the mock recorder for MockWorkerNode.
type MockWorkerNodeMockRecorder struct {
	mock *MockWorkerNode
}

// NewMockWorkerNode creates a new mock instance.
func NewMockWorkerNode(ctrl *gomock.Controller) *MockWorkerNode {
	mock := &MockWorkerNode{ctrl: ctrl}
	mock.recorder = &MockWorkerNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerNode) EXPECT() *MockWorkerNodeMockRecorder {
	return m.recorder
}

// AddWorkerNode mocks base method.
func (m *MockWorkerNode) AddWorkerNode(ctx context.Context, node models.NodeEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkerNode", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWorkerNode indicates an expected call of AddWorkerNode.
func (mr *MockWorkerNodeMockRecorder) AddWorkerNode(ctx, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkerNode", reflect.TypeOf((*MockWorkerNode)(nil).AddWorkerNode), ctx, node)
}

// CheckRunningTaskInEachWorkerNode mocks base method.
func (m *MockWorkerNode) CheckRunningTaskInEachWorkerNode(ctx context.Context) map[primitive.ObjectID]bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRunningTaskInEachWorkerNode", ctx)
	ret0, _ := ret[0].(map[primitive.ObjectID]bool)
	return ret0
}

// CheckRunningTaskInEachWorkerNode indicates an expected call of CheckRunningTaskInEachWorkerNode.
func (mr *MockWorkerNodeMockRecorder) CheckRunningTaskInEachWorkerNode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRunningTaskInEachWorkerNode", reflect.TypeOf((*MockWorkerNode)(nil).CheckRunningTaskInEachWorkerNode), ctx)
}

// DistributeWork mocks base method.
func (m *MockWorkerNode) DistributeWork(ctx context.Context, jobID models.Job, tasks []models.Task) ([]models.Task, []models.DistributeError, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributeWork", ctx, jobID, tasks)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].([]models.DistributeError)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DistributeWork indicates an expected call of DistributeWork.
func (mr *MockWorkerNodeMockRecorder) DistributeWork(ctx, jobID, tasks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeWork", reflect.TypeOf((*MockWorkerNode)(nil).DistributeWork), ctx, jobID, tasks)
}

// InitializePool mocks base method.
func (m *MockWorkerNode) InitializePool(ctx context.Context, nodeEntries []models.NodeEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitializePool", ctx, nodeEntries)
}

// InitializePool indicates an expected call of InitializePool.
func (mr *MockWorkerNodeMockRecorder) InitializePool(ctx, nodeEntries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializePool", reflect.TypeOf((*MockWorkerNode)(nil).InitializePool), ctx, nodeEntries)
}

// IsAvailableWorkerNode mocks base method.
func (m *MockWorkerNode) IsAvailableWorkerNode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailableWorkerNode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailableWorkerNode indicates an expected call of IsAvailableWorkerNode.
func (mr *MockWorkerNodeMockRecorder) IsAvailableWorkerNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailableWorkerNode", reflect.TypeOf((*MockWorkerNode)(nil).IsAvailableWorkerNode))
}

// RemoveNodeFromPool mocks base method.
func (m *MockWorkerNode) RemoveNodeFromPool(ctx context.Context, nodeID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveNodeFromPool", ctx, nodeID)
}

// RemoveNodeFromPool indicates an expected call of RemoveNodeFromPool.
func (mr *MockWorkerNodeMockRecorder) RemoveNodeFromPool(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNodeFromPool", reflect.TypeOf((*MockWorkerNode)(nil).RemoveNodeFromPool), ctx, nodeID)
}

// WorkerNodeAvailabilityCheck mocks base method.
func (m *MockWorkerNode) WorkerNodeAvailabilityCheck(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WorkerNodeAvailabilityCheck", ctx)
}

// WorkerNodeAvailabilityCheck indicates an expected call of WorkerNodeAvailabilityCheck.
func (mr *MockWorkerNodeMockRecorder) WorkerNodeAvailabilityCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerNodeAvailabilityCheck", reflect.TypeOf((*MockWorkerNode)(nil).WorkerNodeAvailabilityCheck), ctx)
}
